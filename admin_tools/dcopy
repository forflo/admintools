#!/bin/bash
#
# Autor: Florian Mayer
# Datum: 7.Sept.2013
##

# General global variables
OPTSTRING="g:r:u:qsp:f:dc:"
MACHINES=$REPOS_PATH/git/admintools/machines.list
SIMUL=false
DEBUG=false
QUIET=false
DIRECT=""
# SSH related
USER=$(whoami)
PORT=22
CLIENT=scp

help(){
	clog 2 <<EOF
$0 	[ -g <group> | -r <regex> ]
		[ -u <user> ] 
		[ -f <machinefile> | -c <csv-String> ]
		[ -q ] 
		[ -p <portnumber> ] 
		[ -s ]
		[ -d ]
		<source file/dir> <destination file/dir>

	<group> := defines the group of computers to send commands to
	<regex> := regex for computernames or ip addresses to match
	<user> := defines the user to connect to
	<machinefile> := the file to read machine names and mac addersses from
	<csv-String> := Specifies the computers manually
	q := silent output if set
	p := defines the portnumber the ssh command should use
	s := specifies whether the commands should be run 
				all at the same time. There is no output for
				the simultaneous mode!
	d := specifies whether the script should run in dry mode (debug) 
		no changes will be made
	<source files/dirs ...> := The name should be sufficient information
	<destination file/dir> := same as above
EOF

	return 0
}

dcopy_loadLibs(){
	if type clog > /dev/null 2>&1; then
		echo "[dcopy_loadLibs()]" Logging function exists in your environment
		echo "	" will choose that one
		[ ! -x $BASH_LIB/aa_term_colors.sh ] && {
			echo "[dcopy_loadLibs()]" "Missing file for term colors!"
			return 1
		} || . $BASH_LIB/aa_term_colors.sh
	elif [ -x $BASH_LIB/aa_term_colors.sh -a -x $BASH_LIB/logger.sh ]; then
		. $BASH_LIB/aa_term_colors.sh || {
			echo "[dcopy_loadLibs()]" Could not properly source aa_term_colors.sh
			return 1
		}

		. $BASH_LIB/logger.sh || {
			echo "[dcopy_loadLibs()]" Could not properly source logger.sh
			return 1
		}
	else
		echo "[dcopy_loadLibs()]" Creating dummy logging function 
		function clog(){
			if [ "$#" -eq "1" ]; then
				cat
				return 0
			fi
			shift
			echo "$@"
			return 0
		}
	fi

	return 0
}

dcopy_init(){
	local temp=()

	if [ -n "$REG" ]; then
		mapfile temp < <(grep -E "$REG" $MACHINES)
	elif [ -n "$GROUP" ]; then
		mapfile temp < <(grep -E "$GROUP" $MACHINES)
	elif [ -n "DIRECT" ]; then
		for i in $(echo "$DIRECT" | tr "," " "); do
			temp[$dir]=${i}
			((dir++))
		done
	else
		mapfile temp < <(grep '^[^#]' $MACHINES)
	fi

	for ((i=0; i<${#temp[*]}; i++)); do
		set ${temp[i]}
		NAME[i]=$1
		MAC[i]=$2
		if [ -z "$3" ]; then
			IP[i]="none" # TODO resolve hostname!
		else
			IP[i]=$3
		fi
	done

	return 0
}

dcopy_initAgent(){
	if [ "$(ssh-add -L)" = "The agent has no identities." ]; then
		ssh-add || {
			clog 2 "[dcmd_initAgent()]" Ssh-add could not be executed properly
			return 1
		}
	fi

	return 0
}

dcopy_parseArgs(){
	if [ "$#" = "0" -o "$1" = "--help" -o "$1" = "-h" ]; then
		help
		return 1
	fi

	while getopts $OPTSTRING current; do
		case $current in
			(g) GROUP=$OPTARG;;
			(r) REG="$OPTARG";;
			(u) USER=$OPTARG;;
			(q) QUIET=true;;
			(p) PORT=$OPTARG;;
			(s) SIMUL=true;;
			(f) MACHINES="$OPTARG"
				[ ! -f "$MACHINES" ] && {
					clog 1 "[dcmd_parseArgs()]" "Invalid filename for machines file!"
					return 1
				} ;;
			(d) DEBUG="true";;
			(c) DIRECT="$OPTARG";;
			(*) clog 1 "[dcmd_parseArgs()]" Invalid option flag
				return 1;;
		esac
	done

	shift $((OPTIND-1)) 
	for ((i=1; i<$#; i++)); do
		SOURCE[i-1]="${!i}"
	done
	DEST="${!#}"

	return 0
}

##
# Sends the specified files/dirs to the initialized hosts
# if the given path is a directory scp -r is used!
##
dcopy_sendData(){
	local source=""
	local addargs=""

	for ((j=0; j<${#SOURCE[*]}; j++)); do
		# resetting loop internal data
		addargs="-C"
		source="${SOURCE[j]}"

		if [ -d "$source" ]; then
			addargs+=" -r"
		fi
	
		if [ "$QUIET" = "true" ]; then
			addargs+=" -q" 
			if [ "$SIMUL" = true ]; then
				for ((i=0; i<${#MAC[*]}; i++)); do
					$CLIENT $addargs -f -P $PORT "$source" ${USER}@${NAME[i]}:$DEST || {
						return 1
					}
				done
			else
				for ((i=0; i<${#MAC[*]}; i++)); do
					$CLIENT $addargs -P $PORT "$source" ${USER}@${NAME[i]}:$DEST || {
						return 1
					}
				done
			fi 	
		else
			if [ "$SIMUL" = true ]; then
				addargs=$addargs" -q"
				for ((i=0; i<${#MAC[*]}; i++)); do
					clog 3 ${NAME[i]}-${IP[i]}: copy ${source} to ${DEST}
					$CLIENT $addargs -f -P $PORT "$source" ${USER}@${NAME[i]}:$DEST || {
						clog 1 "[dcopy_sendData()]" Failed! \
							$CLIENT $addargs -f -P $PORT "$source" ${USER}@${NAME[i]}:$DEST 
						return 1
					}
				done
			else
				for ((i=0; i<${#MAC[*]}; i++)); do
					clog 3 ${NAME[i]}-${IP[i]}: copy ${source} to ${DEST}
					$CLIENT $addargs -P $PORT "$source" ${USER}@${NAME[i]}:$DEST || {
						clog 1 "[dcopy_sendData()]" Failed! \
							$CLIENT $addargs -P $PORT "$source" ${USER}@${NAME[i]}:$DEST
						return 1
					}
				done
			fi 	
		fi
	done
}

dcopy_debug(){
	local addargs=""

	echo G: $GROUP && echo R: $REG && echo U: $USER && echo Q: $QUIET
	echo P: $PORT && echo S: $SIMUL && echo F: $MACHINES && echo Sr: ${SOURCE[*]}
	echo Dest: $DEST

	for ((j=0; j<${#SOURCE[*]}; j++)); do
		echo 
		echo FILE: ${SOURCE[j]}
		for ((i=0; i<${#MAC[*]}; i++)); do
			if [ -d "${SOURCE[j]}" ]; then
				addargs=" -r"
			fi
			echo Command for Name: ${NAME[i]}
			echo $CLIENT $addargs -f -P $PORT "${SOURCE[j]}" ${USER}@${NAME[i]}:$DEST 
			echo ${MAC[i]} " " ${IP[i]} " " ${NAME[i]}
		done
	done

	return 0
}


main(){
	dcopy_loadLibs || {
		clog 1 "[main()]" Could load libraries!
		return 1
	}	

	dcopy_initAgent || {
		clog 1 "[main()]" Could not initialize ssh agent!
		return 1
	}

	dcopy_parseArgs $@ || {
		clog 1 "[main()]" Could not parse options!
		return 1
	}

	dcopy_init || {
		clog 1 "[main()]" Could not initialize dcopy!
		return 1
	}

	if [ $DEBUG = "true" ]; then
		dcopy_debug
	else 	
		dcopy_sendData || {
			clog 1 "[main()]" Could not send Data!
			return 1
		}
	fi

	return 0	
}

main $@ && exit 0 || exit 1
