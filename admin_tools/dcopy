#!/bin/bash
#----->dcopy<------
#Autor: Florian Mayer
#Datum: 7.Sept.2013
#
#$0 	[-g <group> | --nreg <regex> | --ipreg <regex>] 
#	[ -u <user> ] 
#	[ -s ] 
#	[ -p <portnumber> ] 
#	[ --simultaneous ]
#	<command>
#

. $BASH_LIB/funktionen/aa_term_colors.sh


OPTSTRING="g:r:u:qsp:f:dm:"
USER=$(whoami)
QUIET=false
SIMUL=false
MACHINES=$REPO/code/data/machines.list
PORT=22
DRY=false
DIRECT=""

CLIENT=scp
ADDARGS="-C"

help(){
	cat <<EOF
$0 	[ -g <group> | -r <regex> | -m <regex> ] 
		[ -u <user> ] 
		[ -f <machinefile> ]
		[ -q ] 
		[ -p <portnumber> ] 
		[ -s ]
		[ -d ]
		<source file/dir> <destination file/dir>
		

	<group> := defines the group of computers to send commands to
	<regex> := regex for computernames or ip addresses to match
	<user> := defines the user to connect to
	<machinefile> := the file to read machine names and mac addersses from
	q := silent output if set
	p := defines the portnumber the ssh command should use
	s := specifies whether the commands should be run 
				all at the same time. There is no output for
				the simultaneous mode!
	d := specifies whether there should be a dry run. 
	<source files/dirs ...> := The name should be sufficient information
	<destination file/dir> := same as above
EOF
}

if [[ "$1" = @(--[hH][Ee][lL][pP]|-[hH]) || "$#" = 0 ]]; then
	log_prompt(){
		echo -n ""
	}
	help | clog 2
	exit 0
fi

if [ "$(ssh-add -L)" = "The agent has no identities." ]; then
	ssh-add
fi

while getopts $OPTSTRING current; do
	case $current in
		(g) GROUP=$OPTARG;;
		(r) REG="$OPTARG";;
		(u) USER=$OPTARG;;
		(q) QUIET=true;;
		(p) PORT=$OPTARG;;
		(s) SIMUL=true;;
		(f) MACHINES="$OPTARG";;
		(d) DRY="true";;
		(m) DIRECT="$OPTARG";;
	esac
done
shift $((OPTIND-1)) 
for ((i=1; i<$#; i++)); do
	SOURCE[i]="${!i}"
done
DEST="$2"


##
# Fills the Arrays "MAC", "IP" and "NAME"
# with fitting values
##
init(){
	if [ -n "$REG" ]; then
		mapfile TEMP < <(grep "$REG" $MACHINES)
	elif [ -n "$GROUP" ]; then
		mapfile TEMP < <(grep "$GROUP" $MACHINES)
	elif [ -n "DIRECT" ]; then
		local oldifs="$IFS"
		IFS=","
		set $DIRECT
		for ((i=0;i<$#;i++)); do
			TEMP[i]=${!i}
		done
		IFS="$oldifs"
		set --
	else
		mapfile TEMP < <(grep '^[^#]' $MACHINES)
	fi

	for ((i=0; i<${#TEMP[*]}; i++)); do
		set ${TEMP[i]}
		NAME[i]=$1
		MAC[i]=$2
		if [ -z "$3" ]; then
			IP[i]="none" # TODO resolve hostname!
		else
			IP[i]=$3
		fi
	done
	unset TEMP
}

##
# Sends the specified files/dirs to the initialized hosts
# if the given path is a directory scp -r is used!
##
send_data(){
	if [ -d "$SOURCE" ]; then
		ADDARGS=$ADDARGS" -r"
	fi

	if [ "$QUIET" = "true" ]; then
		ADDARGS=$ADDARGS" -q" # yeah, i know that i could have put the port, user and host  spec in here...
		if [ "$SIMUL" = true ]; then
			for ((i=0; i<${#MAC[*]}; i++)); do
				$CLIENT $ADDARGS -f -P $PORT "$SOURCE" ${USER}@${NAME[i]}:$DEST 
			done
		else
			for ((i=0; i<${#MAC[*]}; i++)); do
				$CLIENT $ADDARGS -P $PORT "$SOURCE" ${USER}@${NAME[i]}:$DEST 
			done
		fi 	
	else
		if [ "$SIMUL" = true ]; then
			ADDARGS=$ADDARGS" -q" #always quiet
			for ((i=0; i<${#MAC[*]}; i++)); do
				$CLIENT $ADDARGS -f -P $PORT "$SOURCE" ${USER}@${NAME[i]}:$DEST 
			done
		else
			for ((i=0; i<${#MAC[*]}; i++)); do
				clog 3 ${NAME[i]}-${IP[i]}: copy ${SOURCE} to ${DEST}
				$CLIENT $ADDARGS -P $PORT "$SOURCE" ${USER}@${NAME[i]}:$DEST 
			done
		fi 	
	fi
}

##
# For dry run use
##
print_opts(){
	echo G: $GROUP && echo R: $REG && echo U: $USER && echo Q: $QUIET
	echo P: $PORT && echo S: $SIMUL && echo F: $MACHINES && echo Sr: $SOURCE
	echo Dest: $DEST
}

print_arrays(){
	for ((i=0; i<${#MAC[*]}; i++)); do
		echo ${MAC[i]} " " ${IP[i]} " " ${NAME[i]}
	done
}

init

if [ $DRY = "false" ]; then
	send_data
else
	print_opts
	print_arrays
fi
