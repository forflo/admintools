#!/bin/bash
# donline - A script for checking whether a cluster is online
##

##
# Depends on basem, bashm 
# (see. github.org/forflo/{basem,bashm})
##

# CNT: pingcount - TMT: Timeout - FMT: Format - PB: PID Buffer
CNT=1
TMT=1
PB=""
FMT=human
MACHINES=$REPOS_PATH/git/admintools/machines.list
# Sys-V keys for IPC-Resources. Could be randomized
BASHM=12345 
BASEM=12345
OPTSTR="f:r:t:c:d:"
REG="NTB008[Aa]"

donline_help(){
	clog 2 <<EOF
usage: $0 [-r <regex> ] 
    [ -t <timeout> ] 
    [ -c <count> ] 
    [ -f <formatcode>  -d <delimiter> ]

	<regex> := Regex the computernames have to match
	<timeout> := The timeout value for the ping program in seconds
	<count> := The number of tries ping should use
	<delimiter> := The delimiter for formatcode
	<formatcode> := The outputformat. Allowed values are
	  human => normal behaviour. Human readable with fancy coloring...
	  csv => comma separated value string. 
	  list => Between every entry newline is used as delimiter
	  delim => Separator of -d is used
	  num => only the number of online machines is printed
	  In csv, list and delim only the computernames of online machines is displayed!

	  Standards
	  ---------
	  Format: human
	  Counts of pings: 1
	  Timeout (in sec): 1
	  Delimiter: ","
EOF

	return 0
}

donline_loadLibs(){
	if type clog > /dev/null 2>&1; then
		[ ! -x $BASH_LIB/aa_term_colors.sh ] && {
			echo "[donline_loadLibs()]" "Missing file for term colors!"
			return 1
		} || . $BASH_LIB/aa_term_colors.sh
	elif [ -x $BASH_LIB/aa_term_colors.sh -a -x $BASH_LIB/logger.sh ]; then
		. $BASH_LIB/aa_term_colors.sh || {
			echo "[donline_loadLibs()]" Could not properly source aa_term_colors.sh
			return 1
		}

		. $BASH_LIB/logger.sh || {
			echo "[donline_loadLibs()]" Could not properly source logger.sh
			return 1
		}
	else
		function clog(){
			if [ "$#" -eq "1" ]; then
				cat
				return 0
			fi
			shift
			echo "$@"
			return 0
		}
	fi

	return 0
}

donline_parseArgs(){
	if [ "$#" = "0" -o "$1" = "--help" -o "$1" = "-h" ]; then
		donline_help
		return 1
	fi

	while getopts ${OPTSTR} input; do
		case $input in
			(r) REG="$OPTARG" ;;
			(t) TMT="$OPTARG" ;;
			(c) CNT="$OPTARG" ;;
			(f) FMT="$OPTARG"
				case $FMT in 
					(csv) ;; 
					(human) ;; 
					(num) ;; 
					(list) ;; 
					(delim) ;; 
					(*) donline_help
						clog 1 "[donline_parseArgs()]" Invalid format!
						return 1;;  
				esac 
				;;
			(d) DELIM="$OPTARG" ;;
			(*) donline_help; return 1;;
		esac
	done

	return 0
}

donline_init(){
	local temp=()
	local dir=0

	if [ -n "$REG" ]; then
		mapfile temp < <(grep -E "$REG" $MACHINES)
	elif [ -n "$GROUP" ]; then
		mapfile temp < <(grep -E "$GROUP" $MACHINES)
	elif [ -n "$DIRECT" ]; then
		for i in $(echo "$DIRECT" | tr "," " "); do
			echo ${i}
			temp[$dir]=${i}
			((dir++))
		done
	else
		mapfile temp < <(grep '^[^#]' $MACHINES)
	fi

	for ((i=0; i<${#temp[*]}; i++)); do
		set ${temp[i]}
		NAME[i]=$1
		MAC[i]=$2
		if [ -z "$3" ]; then
			IP[i]="none" # TODO resolve hostname!
		else
			IP[i]=$3
		fi
	done

	return 0
}

donline_getOnline(){
	##
	# creates a semaphor
	# creates a shared memory segment with length 10000 bytes
	basem --key $BASEM -c -i 1 || {
		clog 1 "[donline_getOnline()]" Creation of semaphore failed!
		return 1
	}
	
	bashm --key $BASHM -c -l 10000 -p 660 || {
		clog 1 "[donline_getOnline()]" Creation of shared memory segment failed!
		return 1
	}

	##	
	# Starts one bash process for every computername in NAMES
	for ((i=0; i<${#NAME[*]}; i++)); do
		if ping -W $TMT -c $CNT ${NAME[i]} > /dev/null 2>&1; then
			case $FMT in
				(csv) 
					##
					# enter critical stage
					basem -k $BASEM -p
					##
					# appends the computername to the shm segment
					bashm -k $BASHM -s "$(bashm -k $BASHM -g),${NAME[i]}"
					##
					# leave critical stage
					basem -k $BASEM -v 
					;;
				(human) 
					clog 2 Der Rechner ${NAME[i]} ist online!  
					;;
				(num) 
					basem -k $BASEM -p
					bashm -k $BASHM -s $(($(bashm -k $BASHM -g) + 1)) 
					basem -k $BASEM -v 
					;;
				(list) 
					echo ${NAME[i]} 
					;;
				(delim) 
					basem -k $BASEM -p
					bashm -k $BASHM -s "$(bashm -k $BASHM -g)${DELIM}${NAME[i]}"
					basem -k $BASEM -v
					;;
			esac
		else
			case $FMT in
				(human) clog 1 Der Rechner ${NAME[i]} ist nicht online!  ;;
			esac
		fi &

		##
		# builds the waitbuffer PB
		PB=$PB" "$!
	done
	##
	# waits for the termination of all child processes
	wait $PB

	##
	# prints results
	case $FMT in
		(csv) bashm -k $BASHM -g ;;
		(num) bashm -k $BASHM -g ; echo "";;
		(delim) bashm -k $BASHM -g ;;
		(*) ;;
	esac
	
	##
	# destroys the shared memory segment and the semaphor
	# check whether we are running connected to a terminal or not
	basem --key $BASEM -d || {
		clog 1 "[donline_getOnline()]" Could not destroy semaphor!
		return 1
	}

	bashm --key $BASHM -d || {
		clog 1 "[donline_getOnline()]" Could not destory shared memory segment!
		return 1
	}

	return 0
}

main(){
	donline_loadLibs || {
		clog "[main()]" Could not load libraries!
		return 1
	}

	donline_parseArgs $@ || {
		clog "[main()]" Could not parse cli options!
		return 1
	}

	donline_init || {
		clog "[main()]" Could not initialize main!
		return 1
	}

	donline_getOnline || {
		clog "[main()]" Execution of donline_getOnline failed!
		return 1
	}

	return 0
}

main $@ && exit 0 || exit 1
