#!/bin/bash
#
# Autor: Florian Mayer
# Datum: 7.Sept.2013
# Depends: shellyCode
#
# $0 	[-g <group> | --nreg <regex> | --ipreg <regex>] 
#	[ -u <user> ] 
#	[ -s ] 
#	[ -p <portnumber> ] 
#	[ --simultaneous ]
#	<command>
#
##

OPTSTRING="g:r:u:qsp:f:o:dm:"
USER=$(whoami)
GROUP=
REG=
QUIET=false
SIMUL=false
MACHINES=$REPOS_PATH/git/admintools/machines.list
PORT=22
OUTDIR="$PWD"/dcmd.d/
DEBUG="false"
DIRECT=""

CLIENT=ssh
ADDARGS="-C"

dcmd_loadLibs(){
	if type clog > /dev/null 2>&1; then
		echo "[dcmd_loadLibs()]" Logging function exists in your environment
		echo "	" will choose that one
		[ ! -x $BASH_LIB/aa_term_colors.sh ] && {
			echo "[dcmd_loadLibs()]" "Missing file for term colors!"
			return 1
		} || . $BASH_LIB/aa_term_colors.sh
	elif [ -x $BASH_LIB/aa_term_colors.sh -a -x $BASH_LIB/logger.sh ]; then
		. $BASH_LIB/aa_term_colors.sh || {
			echo "[dcmd_loadLibs()]" Could not properly source aa_term_colors.sh
			return 1
		}

		. $BASH_LIB/logger.sh || {
			echo "[dcmd_loadLibs()]" Could not properly source logger.sh
			return 1
		}
	else
		echo "[dcmd_loadLibs()]" Creating dummy logging function 
		function clog(){
			if [ "$#" -eq "1" ]; then
				cat
				return 0
			fi
			shift
			echo "$@"
			return 0
		}
	fi

	return 0
}

dcmd_init(){
	local temp=()
	local dir=0

	if [ -n "$REG" ]; then
		mapfile temp < <(grep -E "$REG" $MACHINES)
	elif [ -n "$GROUP" ]; then
		mapfile temp < <(grep -E "$GROUP" $MACHINES)
	elif [ -n "$DIRECT" ]; then
		for i in $(echo "$DIRECT" | tr "," " "); do
			temp[$dir]=${i}
			((dir++))
		done
	else
		mapfile temp < <(grep '^[^#]' $MACHINES)
	fi

	for ((i=0; i<${#temp[*]}; i++)); do
		set ${temp[i]}
		NAME[i]=$1
		MAC[i]=$2
		if [ -z "$3" ]; then
			IP[i]="none" # TODO resolve hostname!
		else
			IP[i]=$3
		fi
	done

	return 0
}

help(){
	clog 2 <<EOF
$0 	[ -g <group> | -r <regex> | -m <regex> ] 
    [ -u <user> ] 
    [ -f <machinefile> ]
    [ -q ] 
    [ -p <portnumber> ] 
    [ -s ]
    [ -o <output dir> ] 
    [ -d ]
    <command>
    
    <group> := defines the group of computers to send commands to
    <regex> := regex for computernames or ip addresses to match
    <user> := defines the user to connect to
    <machinefile> := the file to read machine names and mac addersses from
    q := silent output if set
    p := defines the portnumber the ssh command should use
    s | simultaneous := 	specifies whether the commands should be run 
    			all at the same time
    d := dry run. Nothing is executed here
    <command> := this is where the fun part starts!
EOF

	return 0
}

dcmd_initAgent(){
	if [ "$(ssh-add -L)" = "The agent has no identities." ]; then
		ssh-add || {
			clog 2 "[dcmd_initAgent()]" Ssh-add could not be executed properly
			return 1
		}
	fi

	return 0
}

dcmd_parseArgs(){
	if [ "$#" = "0" -o "$1" = "--help" -o "$1" = "-h" ]; then
		help
		return 1
	fi

	while getopts $OPTSTRING current; do
		case $current in
			(g) GROUP="$OPTARG";;
			(r) REG="$OPTARG";;
			(u) USER="$OPTARG";;
			(q) QUIET=true;;
			(p) PORT=$OPTARG;;
			(s) SIMUL=true;;
			(f) MACHINES="$OPTARG"
				[ ! -f "$MACHINES" ] && {
					clog 1 "[dcmd_parseArgs()]" "Invalid filename for machines file!"
					return 1
				} ;;
			(o) OUTDIR="$OPTARG"
				[ ! -d "$OUTDIR" ] && {
					clog 1 "[dcmd_parseArgs()]" The output directory could not be found!
					clog 2 "[dcmd_parseArgs()]" Will create directory the current directory.
					mkdir -p "$OUTDIR" || {
						clog 1 "[dcmd_parseArgs()]" Error "while" creating \
							foler. Maybe Insufficient rights?
						return 1
					}
				} ;;
			(d) DEBUG="true";;
			(m) DIRECT="$OPTARG";;

			(*) clog 1 "[dcmd_parseArgs()]" Invalid option flag
				return 1;;
		esac
	done
	shift $((OPTIND-1))
	COMMAND="$@"

	return 0
}

##
# Sends the specified command to the initialized hosts
##
dcmd_sendCmd(){
	if [ "$QUIET" = "true" ]; then
		if [ "$SIMUL" = true ]; then
			for ((i=0; i<${#MAC[*]}; i++)); do
				$CLIENT $ADDARGS -f -p $PORT ${USER}@${NAME[i]} "$COMMAND" > /dev/null || {
					return 1
				}
			done
		else
			for ((i=0; i<${#MAC[*]}; i++)); do
				$CLIENT $ADDARGS -p $PORT ${USER}@${NAME[i]} "$COMMAND" > /dev/null || {
					return 1
				}
			done
		fi 	
	else
		if [ "$SIMUL" = true ]; then
			for ((i=0; i<${#MAC[*]}; i++)); do
				$CLIENT $ADDARGS -f -p $PORT ${USER}@${NAME[i]} "$COMMAND" > ${OUTDIR}/${NAME[i]}.out || {
					clog 1 "[dcmd_sendCmd()]" "Command for computer \
						${NAME[i]} terminated with != 0"
					return 1
				}
			done
		else
			for ((i=0; i<${#MAC[*]}; i++)); do
				clog 3 ${NAME[i]}-${IP[i]}: 
				$CLIENT $ADDARGS -p $PORT ${USER}@${NAME[i]} "$COMMAND" | clog 2 || {
					clog 1 "[dcmd_sendCmd()]" "Command for computer \
						${NAME[i]} terminated with != 0"
					return 1
				}
			done
		fi 	
	fi

	return 0
}

dcmd_debug(){
	echo G: $GROUP && echo R: $REG && echo U: $USER && echo Q: $QUIET
	echo P: $PORT && echo S: $SIMUL && echo F: $MACHINES 
	echo D: $DEBUG
	echo Direct: $DIRECT

	return 0
}

main(){
	dcmd_loadLibs || {
		clog 1 "[main()]" Could not load libraries!
		return 1
	}

	dcmd_initAgent || {
		clog 1 "[main()]" Could not deal with ssh agent!
		return 1
	}

	dcmd_parseArgs $@ || {
		clog 1 "[main()]" Could not parse Arguments!
		return 1
	}

	dcmd_init || {
		clog 1 "[main()]" Could not initialize script!
		return 1
	}

	if [ "$DEBUG" = "true" ]; then
		dcmd_debug
		return 0
	else 
		dcmd_sendCmd || {
			clog 1 "[main()]" "Error while sending commands!"
			return 1
		}
	fi

	return 0
}

main $@ && exit 0 || exit 1
