#!/bin/bash
#Autor: Florian Mayer
#Datum: 7.Sept.2013
#
#$0 	[-g <group> | --nreg <regex> | --ipreg <regex>] 
#	[ -u <user> ] 
#	[ -s ] 
#	[ -p <portnumber> ] 
#	[ --simultaneous ]
#	<command>
##

OPTSTRING="g:r:qf:w:m:d"
REG=""
GROUP=""
DIRECT=""
DEBUG=false
QUIET=false
MACHINES=$REPOS_PATH/git/admintools/machines.list
WAIT="0.2"
PROG=wakeonlan

help(){
	clog 2 <<EOF
$0 	[ -g <group> | -r <regex>  | -m <machines list (csv)> ]
		[ -f <machinefile> ]
		[ -q ] 
		[ -w <time to wait> ] 
		[ -d <dry mode: debug> ]

	<group> := defines the group of computers to send commands to
	<regex> := regex for computernames or ip addresses to match
	<machinefile> := the file to read machine names and mac addersses from

	q := silent output if set
	w := the time between the single magic pakets
EOF

	return 0
}

dwake_loadLibs(){
	if type clog > /dev/null 2>&1; then
		echo "[dwake_loadLibs()]" Logging function exists in your environment
		echo "	" will choose that one

		[ ! -x $BASH_LIB/aa_term_colors.sh ] && {
			echo "[dwake_loadLibs()]" "Missing file for term colors!"
			return 1
		} || . $BASH_LIB/aa_term_colors.sh
	elif [ -x $BASH_LIB/aa_term_colors.sh -a -x $BASH_LIB/logger.sh ]; then
		. $BASH_LIB/aa_term_colors.sh || {
			echo "[dwake_loadLibs()]" Could not properly source aa_term_colors.sh
			return 1
		}

		. $BASH_LIB/logger.sh || {
			echo "[dwake_loadLibs()]" Could not properly source logger.sh
			return 1
		}
	else
		echo "[dwake_loadLibs()]" Creating dummy logging function 
		function clog(){
			if [ "$#" -eq "1" ]; then
				cat
				return 0
			fi
			shift
			echo "$@"
			return 0
		}
	fi

	return 0
}

dwake_parseArgs(){
	if [ "$#" = "0" -o "$1" = "--help" -o "$1" = "-h" ]; then
		help
		return 1
	fi

	while getopts $OPTSTRING current; do
		case $current in
			(g) GROUP=$OPTARG;;
			(r) REG="$OPTARG";;
			(q) QUIET=true;;
			(f) MACHINES="$OPTARG"
				[ ! -f "$MACHINES" ] && {
					clog 1 "[dcmd_parseArgs()]" "Invalid filename for machines file!"
					return 1
				} ;;
			(w) WAIT="$OPTARG";;
			(m) DIRECT="$OPTARG" ;;
			(d) DEBUG="true";;
			(*) help
				return 1;;
		esac
	done

	return 0
}

##
# Fills the Arrays "MAC", "IP" and "NAME"
# with fitting values
##
dwake_init(){
	local temp=()
	local temp2=()
	local dir=0

	if [ -n "$REG" ]; then
		mapfile temp < <(grep -E "$REG" $MACHINES)
	elif [ -n "$GROUP" ]; then
		mapfile temp < <(grep -E "$GROUP" $MACHINES)
	elif [ -n "$DIRECT" ]; then
		for i in $(echo "$DIRECT" | tr "," " "); do
			temp2[$dir]=${i}
			temp[$dir]=$(grep -E "${temp2[$dir]}" "$MACHINES")
			((dir++))
		done
	else
		##
		# All computers in $MACHINES
		mapfile temp < <(grep '^[^#]' $MACHINES)
	fi

	for ((i=0; i<${#temp[*]}; i++)); do
		set ${temp[i]}
		NAME[i]=$1
		MAC[i]=$2
		if [ -z "$3" ]; then
			IP[i]="none"
		else
			IP[i]=$3
		fi
	done

	return 0
}

##
# Sends the specified command to the initialized hosts
##
dwake_wakeup(){
	if [ "$QUIET" = "true" ]; then
		for ((i=0; i<${#MAC[*]}; i++)); do
			sleep $WAIT
			$PROG ${MAC[i]} > /dev/null || {
				return 1
			}
		done
	else
		for ((i=0; i<${#MAC[*]}; i++)); do
			sleep $WAIT
			$PROG ${MAC[i]} | flog 2 bold
			((${PIPESTATUS[0]})) && {
				clog 1 "[dwake_wakeup()]" Execution of $PROG failed!
				return 1
			}
		done
	fi

	return 0
}

dwake_debug(){
	echo REG:     $REG
	echo GROUP    $GROUP
	echo DIRECT   $DIRECT
	echo DEBUG    $DEBUG
	echo QUIET    $QUIET
	echo SIMUL    $SIMUL
	echo MACHINES $MACHINES
	echo WAIT     $WAIT
	echo PROG     $PROG
	
	return 0
}

main(){
	dwake_loadLibs || {
		clog 1 "[main()]" Could not load libraries
		return 1
	}

	dwake_parseArgs $@ || {
		clog 1 "[main()]" Could not parse the script\'s arguments!
		return 1
	}

	dwake_init || {
		clog 1 "[main()]" Could not initialize dwake!
		return 1
	}
	
	if [ "$DEBUG" = "true" ]; then
		dwake_debug
		return 0
	else
		dwake_wakeup || {
			clog 1 "[main()]" Could not execute wakeup routine!
			return 1
		}	

	fi

	return 0
}

main $@ && exit 0 || exit 1
