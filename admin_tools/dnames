#!/bin/bash
#Autor: Florian Mayer
#Datum: 30.Sept.2013
#Zweck: Gibt Computernamen, die in der machines.list-Datei gespeichert sind und
#		auf den angegebenen Regex matchen, zeilenweise aus.
##

OPTSTR="f:r:c"
CSV="false"
REGEX="NTB008[Aa]"
MACHINES=$REPOS_PATH/git/admintools/machines.list

help(){
	clog 2 << EOF
$0 [ -r <regex> ] [ -f <alternative machine file> ] [ -c ]
	-c := Print out a comma separated list of values
EOF

	return 
}

dnames_loadLibs(){
	if type clog > /dev/null 2>&1; then
		echo "[dnames_loadLibs()]" Logging function exists in your environment
		echo "	" will choose that one
		[ ! -x $BASH_LIB/aa_term_colors.sh ] && {
			echo "[dnames_loadLibs()]" "Missing file for term colors!"
			return 1
		} || . $BASH_LIB/aa_term_colors.sh
	elif [ -x $BASH_LIB/aa_term_colors.sh -a -x $BASH_LIB/logger.sh ]; then
		. $BASH_LIB/aa_term_colors.sh || {
			echo "[dnames_loadLibs()]" Could not properly source aa_term_colors.sh
			return 1
		}

		. $BASH_LIB/logger.sh || {
			echo "[dnames_loadLibs()]" Could not properly source logger.sh
			return 1
		}
	else
		function clog(){
			if [ "$#" -eq "1" ]; then
				cat
				return 0
			fi
			shift
			echo "$@"
			return 0
		}
	fi

	return 0
}

dnames_parseArgs(){
	if [ "$#" = "0" -o "$1" = "--help" -o "$1" = "-h" ]; then
		help
		return 1
	fi

	while getopts $OPTSTR input; do
		case $input in
			(f) MACHINES="$OPTARG"
				[ ! -f "$MACHINES" ] && {
					clog 1 "[dnames_parseArgs()]" "Invalid filename for machines file!"
					return 1
				} ;;
			(r) REGEX=$OPTARG ;;
			(c) CSV="true" ;;
			(*) help; return 1 ;;
		esac
	done

	return 0
}

dnames_printNames(){
	local temp=()

	mapfile temp < <(grep "$REGEX" "$MACHINES")

	for ((i=0; i<${#temp[*]}; i++)); do
		set ${temp[i]}
		if [ "$CSV" = "false" ]; then
			echo $1
		else 
			if [ $i -eq $((${#temp[*]}-1)) ]; then
				echo -n $1
			else 
				echo -n $1","
			fi
		fi
	done

	return 0
}


##
# Fills the Array "NAME"
# with fitting values
##
main(){
	dnames_loadLibs || {
		clog 1 "[main()]" Could not load Libraries!
		return 1
	}

	dnames_parseArgs $@ || {
		clog 1 "[main()]" Could not parse options!
		return 1
	}

	dnames_printNames || { 
		clog 1 "[main()]" "Could not print names!"
		return 1
	}

	return 1
}

main $@ && exit 0 || exit 1
